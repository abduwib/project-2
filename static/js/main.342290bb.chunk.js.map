{"version":3,"sources":["task.js","App.js","serviceWorker.js","index.js"],"names":["Task","state","hide","hideTask","_this","setState","console","log","_this2","this","props","task","text","react_default","a","createElement","className","onClick","event","deleteTask","index","Component","App","addForm","image","items","updateForm","addText","target","value","originalState","copy","Object","assign","name","submitForm","preventDefault","slice","push","splice","axios","method","url","then","response","data","urls","regular","catch","e","_this3","list","map","src_task","onSubmit","type","onChange","autocomplete","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.342290bb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css'\n\nclass Task extends Component {\n    state = {\n        hide: 'false'\n    }\n\n    hideTask = () =>{\n        if (this.state.hide === 'false'){\n            this.setState({hide:'done'})\n        } else {\n            this.setState({hide:'false'})\n        }\n        console.log(this.state.hide)\n    }\n    render(){\n        return(this.props.task.text === \"\" ? \"\" : <li>\n                   \n                    <span className ={this.state.hide} onClick={this.hideTask}> {this.props.task.text} </span>\n                    <div className='rmbtn' onClick = {(event) => this.props.deleteTask(this.props.index)}> \n                    </div>\n                </li>\n        )\n    }\n}\n\n\nexport default Task;","import React, { Component } from 'react';\nimport Task from './task.js'\nimport axios from 'axios'\n// import './index.css';\n\nclass App extends Component {\n  state = {\n      addForm:{\n        text :''\n      }, \n      image : '',\n    items: [\n      {'text': ''} \n    ]\n  }\n  updateForm = (event) => {\n    const addText = event.target.value\n    const originalState = this.state.addForm\n    const copy = Object.assign({}, originalState);\n    const key = event.target.name\n    copy[key] = addText\n    this.setState({\n      addForm: copy\n    })\n  }\n\n  submitForm = (event) => {\n    event.preventDefault()\n    const copy = this.state.items.slice(0)\n    copy.push(this.state.addForm)\n    this.setState({\n      items : copy, addForm: { text:'' }\n    })\n  }\n\n  deleteTask = (index) => {\n    console.log('del')\n    const copy = this.state.items.slice(0)\n    copy.splice(index,1)\n    this.setState({items : copy})\n    console.log('delete task run')\n  }\n    \n  componentDidMount(){\n\n    axios({\n      method: 'get',\n      url: 'https://api.unsplash.com/photos/random?client_id=128c6d42935ec9ac7531df0274b453109c8d6137d58ddac9f3614019f78580bd'\n    })\n    .then(response => \n      \n      this.setState({\n        image: response.data.urls.regular\n      })\n      \n      \n      )\n    .catch( e => console.log(e))\n\n  }\n  render() {\n    const list = this.state.items.map((task, index) => {\n      return <Task task = {task} index = {index} deleteTask = {this.deleteTask} />\n    })\n\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n\n          <div className='todo-section col'>\n          <h2 className=\"title\">Taskful</h2>\n            <form onSubmit = {this.submitForm} >\n            <div className=\"input-group mb-3\">\n              <input className=\"form-control\"  type = 'text' name = 'text' onChange = {this.updateForm} value = {this.state.addForm.text} autocomplete=\"off\"/>\n              </div>\n            </form>\n\n            <div className=\"container-fluid pt-3\"> \n              <ul>\n                {list}\n              </ul> \n            </div>\n\n          </div>\n\n          <div className='image-section col'>\n            \n            <div className='image'> <img  src={this.state.image}/></div>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}